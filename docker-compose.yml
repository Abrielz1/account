services:

  redis:
    image: redis:7.0.12
    container_name: my-redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  account_db:
    image: postgres:14.6-alpine
    container_name: account_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app-network

  account_service:
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    image: account
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://account_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"

      SPRING_CACHE_TYPE: redis
      SPRING_REDIS_HOST: my-redis
      SPRING_REDIS_PORT: 6379

    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:8080/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3


    depends_on:
      - account_db
      - redis
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data: {}

networks:
  app-network:
    driver: bridge
