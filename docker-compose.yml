version: '3.8'

services:
  # --- Инфраструктура ---
  redis:
    image: redis:7.2-alpine
    container_name: fintech-redis # Даем более уникальное имя
    ports:
      - "${REDIS_PORT:-6379}:6379" # Добавляем значение по умолчанию
    volumes:
      - redis_data:/data
    networks:
      - fintech-network # Используем уникальное имя сети
    restart: on-failure # Более щадящий рестарт
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  account_db:
    image: postgres:15-alpine
    container_name: business-db # Называем его 'business', т.к. скоро будет и 'security'
    ports:
      - "${BUSINESS_DB_PORT:-5432}:5432"
    volumes:
      - business_db_data:/var/lib/postgresql/data
    environment:
      # Все креды для базы должны приходить из env_file
      POSTGRES_DB: ${BUSINESS_DB_NAME}
      POSTGRES_USER: ${BUSINESS_DB_USER}
      POSTGRES_PASSWORD: ${BUSINESS_DB_PASSWORD}
    networks:
      - fintech-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BUSINESS_DB_USER}"]
      interval: 10s

  # --- Моё Приложение собственно ---
  account_service:
    build: . # Собирает Dockerfile из текущей папки, на, что указывает .
    container_name: account-service
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - fintech-network
    restart: on-failure

    # Это директива верхнего уровня для сервиса, такая же как ports, build, environment. Она не является частью environment
    env_file:
      - .env

    # В environment мы можем оставить ТОЛЬКО активацию профиля, что и сделано
    # так как все остальное придет из .env файла. Это делает секцию чище.
    environment:
      - SPRING_PROFILES_ACTIVE=prod

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Используй правильную нотацию для depends_on с healthcheck!
    depends_on:
      account_db:
        condition: service_healthy
      redis:
        condition: service_healthy

# --- Volumes & Networks (именуем уникально!) ---
volumes:
  redis_data: {}
  business_db_data: {}

networks:
  fintech-network:
    driver: bridge